name: "Build and deploy"
on:
  push:
    branches:
      - "main"

env:
  "IMAGE": "ghcr.io/${{ github.repository }}/tms-dokumentarkiv:${{ github.sha }}"
jobs:
  build:
    name: "build"
    runs-on: "ubuntu-latest"

    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'

    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-node@v3"
        with:
          node-version: 18
          registry-url: "https://npm.pkg.github.com"
          cache: 'npm'
      - name: "Install dependencies"
        run: "npm ci"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Run tests
        run: npm run test
      - name: Run lint
        run: npm run lint
      - name: "Build application"
        run: "npm run build"
      - name: cdn-upload
        uses: navikt/frontend/actions/cdn-upload/v1@main
        with:
          cdn-team-name: min-side
          source: ./dist/assets
          destination: 'tms-dokumentarkiv'
      - name: "Build and push"
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: min-side
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  deploy-dev:
    runs-on: "ubuntu-latest"
    needs: "build"
    steps:
      - uses: "actions/checkout@v3"
      - name: "Deploy to dev"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/dev-gcp/nais.yaml
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: "ubuntu-latest"
    needs: "build"
    steps:
      - uses: "actions/checkout@v3"
      - name: "Deploy to prod"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais/prod-gcp/nais.yaml
          VAR: image=${{ needs.build.outputs.image }},version=${{ github.sha }}

